"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2883],{1796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(4848),i=t(8453);const o={},s="Experience selection",c={permalink:"/TaskWeaver/blog/experience",editUrl:"https://github.com/microsoft/TaskWeaver/tree/main/website/blog/experience.md",source:"@site/blog/experience.md",title:"Experience selection",description:"We have introduced the motivation of the experience module in Experience",date:"2024-10-23T07:32:58.000Z",tags:[],readingTime:3.87,hasTruncateMarker:!0,authors:[],frontMatter:{},unlisted:!1,prevItem:{title:"How to evaluate a LLM agent?",permalink:"/TaskWeaver/blog/evaluation"},nextItem:{title:"Run TaskWeaver with Locally Deployed Not-that-Large Language Models",permalink:"/TaskWeaver/blog/local_llm"}},a={authorsImageUrls:[]},l=[{value:"Static experience selection",id:"static-experience-selection",level:2},{value:"Dynamic experience selection",id:"dynamic-experience-selection",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We have introduced the motivation of the ",(0,r.jsx)(n.code,{children:"experience"})," module in ",(0,r.jsx)(n.a,{href:"/docs/customization/experience",children:"Experience"}),"\nand how to create a handcrafted experience in ",(0,r.jsx)(n.a,{href:"/docs/customization/experience/handcrafted_experience",children:"Handcrafted Experience"}),".\nIn this blog post, we discuss more advanced topics about the experience module on experience selection."]}),"\n",(0,r.jsx)(n.h2,{id:"static-experience-selection",children:"Static experience selection"}),"\n",(0,r.jsxs)(n.p,{children:["Every role in TaskWeaver can configure its own experience directory, which can be configured\nby setting the ",(0,r.jsx)(n.code,{children:"role_name.experience_dir"})," field in the project configuration file.\nFor the ",(0,r.jsx)(n.code,{children:"Planner"})," and ",(0,r.jsx)(n.code,{children:"CodeInterpreter"})," roles, you can configure the experience directory\nby setting the ",(0,r.jsx)(n.code,{children:"planner.experience_dir"})," and ",(0,r.jsx)(n.code,{children:"code_generator.experience_dir"})," fields respectively.\nThe default experience directory is ",(0,r.jsx)(n.code,{children:"experience"})," in the project directory."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The role name is by default the name of the implementation file (without the extension) of the role unless\nyou have specified the role name by calling ",(0,r.jsx)(n.code,{children:"_set_name"})," in the implementation file."]})}),"\n",(0,r.jsxs)(n.p,{children:["By configuring different experience directories for different roles,\nyou can have different experiences for different roles in a static way.\nUse the ",(0,r.jsx)(n.code,{children:"Planner"})," role as an example, you can have the following project configuration file\nto enable the experience selection for the ",(0,r.jsx)(n.code,{children:"Planner"})," role."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "planner.use_experience": true,\n  "planner.experience_dir": "planner_exp_dir"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"dynamic-experience-selection",children:"Dynamic experience selection"}),"\n",(0,r.jsx)(n.p,{children:"In some cases, you may want to select the experience dynamically based on the input task.\nIn TaskWeaver, although we retrieve the experience based on the query content,\nit is sometimes difficult to obtain the right experience based solely on the similarity\nbetween the query content and the experience content."}),"\n",(0,r.jsxs)(n.p,{children:["One real example we encountered is that we need to retrieve the experience based on the\ntask type. We have many task types in the project, let's say ",(0,r.jsx)(n.code,{children:"task_type_1"}),", ",(0,r.jsx)(n.code,{children:"task_type_2"}),", and ",(0,r.jsx)(n.code,{children:"task_type_3"}),".\nEvery task type is about following a set of instructions to complete a task.\nAlthough different task types have different instructions, the instructions are similar in structure.\nFor example, they all have similar steps like ",(0,r.jsx)(n.code,{children:"step_1"}),", ",(0,r.jsx)(n.code,{children:"step_2"}),", and ",(0,r.jsx)(n.code,{children:"step_3"}),", only\nthe content of the steps is slightly different for different task types.\nActually, even most of the step titles are the same for different task types."]}),"\n",(0,r.jsx)(n.p,{children:"Each task type has its own experience, and we want to select the experience based on the task type.\nEven though we can mix all the experiences into one experience directory, it is very hard\nto differentiate the experiences based on the user input or the step content.\nIn this project, the user input is simply a task ID, and we need to first figure out the task type based on the task ID,\nand then select the experience based on the task type."}),"\n",(0,r.jsx)(n.p,{children:"To achieve this, we add a layer in the experience selection process. Specifically, we allow\nhaving subdirectories in the experience directory.\nFor example, we can have the following experience directory structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"planner_experience\n\u251c\u2500\u2500 task_type_1\n\u2502   \u251c\u2500\u2500 exp_1.yaml\n\u2502   \u251c\u2500\u2500 exp_2.yaml\n\u2502   \u2514\u2500\u2500 ...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When we can identify the task type based on the task ID, we can set the experience subdirectory.\nThis looks straightforward, but how can we set the experience subdirectory in TaskWeaver?\nAs we need to do this in a dynamic way, the only way is to set the experience subdirectory in a ",(0,r.jsx)(n.a,{href:"/docs/concepts/role",children:"role"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["TaskWeaver recently introduced the concept of shared memory as discussed in ",(0,r.jsx)(n.a,{href:"/docs/memory",children:"Shared Memory"}),".\nShared memory allows a role to share information with other roles, and in this case, we can use shared memory to set the experience subdirectory."]}),"\n",(0,r.jsxs)(n.p,{children:["We can add a new role called ",(0,r.jsx)(n.code,{children:"TaskTypeIdentifier"})," to identify the task type based on the task ID.\nThe key part of the ",(0,r.jsx)(n.code,{children:"reply"})," function in ",(0,r.jsx)(n.code,{children:"TaskTypeIdentifier"})," is shown below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def reply(self, memory: Memory, **kwargs: ...) -> Post:\n    # ...\n    # get the task type from the last post message\n    task_type = get_task_type(last_post.message)\n    # create an attachment \n    post_proxy.update_attachment(\n        type=AttachmentType.shared_memory_entry,\n        message="Add experience sub path",\n        extra=SharedMemoryEntry.create(\n            type="experience_sub_path",\n            scope="conversation", # define the effective scope of the shared memory entry to be the whole conversation\n            content="task_type_1",\n        ),\n    )\n\n    return post_proxy.end()\n'})}),"\n",(0,r.jsx)(n.p,{children:"In a role that needs to set the experience subdirectory, we can get the experience subdirectory from the shared memory."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def reply(\n        self,\n        memory: Memory,\n        post_proxy: Optional[PostEventProxy] = None,\n        prompt_log_path: Optional[str] = None,\n        **kwargs: ...,\n    ) -> Post:\n    ...\n    rounds = memory.get_role_rounds(\n        role=self.alias,\n        include_failure_rounds=False,\n    )\n\n    # obtain the query from the last round\n    query = rounds[-1].post_list[-1].message\n    \n    # retrieve the experience based on the query\n    self.role_load_experience(query=query, memory=memory)\n    ...\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"This is the current experimental feature in TaskWeaver which is subject to change."})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"In this blog post, we have discussed how to select experiences in TaskWeaver.\nWe have static experience selection by configuring the experience directory for each role.\nTo enable dynamic experience selection, we have introduced the concept of shared memory to set the experience subdirectory."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);